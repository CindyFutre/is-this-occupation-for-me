'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import type { JobInsightsReport, AnalyzedTerm } from '@/lib/api-client';

interface ResultsPageProps {
  params: {
    soc: string;
  };
}

export default function ResultsPage({ params }: ResultsPageProps) {
  const [results, setResults] = useState<JobInsightsReport | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const router = useRouter();

  useEffect(() => {
    // Get results from sessionStorage
    const storedResults = sessionStorage.getItem('jobAnalysisResults');
    if (storedResults) {
      try {
        const parsedResults: JobInsightsReport = JSON.parse(storedResults);
        setResults(parsedResults);
      } catch (err) {
        setError('Failed to load results. Please try searching again.');
        console.error('Failed to parse stored results:', err);
      }
    } else {
      setError('No results found. Please search for a job title first.');
    }
    setIsLoading(false);
  }, []);

  const handleCopyToClipboard = () => {
    if (!results) return;

    const formatTermsList = (terms: AnalyzedTerm[], title: string) => {
      return `${title}:\n${terms.map((term, index) => `${index + 1}. ${term.term} (${term.count})`).join('\n')}\n`;
    };

    const textToCopy = `Job Analysis Report: ${results.job_title}
Location: ${results.location}
Total Job Postings Analyzed: ${results.total_postings_analyzed}
SOC Code: ${results.soc_code}

${formatTermsList(results.responsibilities, 'Top Responsibilities')}
${formatTermsList(results.skills, 'Top Skills')}
${formatTermsList(results.qualifications, 'Top Qualifications')}
${formatTermsList(results.unique_aspects, 'Unique Aspects')}

Generated by "Is this occupation for me?" - Job Market Analysis Tool`;

    navigator.clipboard.writeText(textToCopy).then(() => {
      // You could add a toast notification here
      alert('Results copied to clipboard!');
    }).catch(err => {
      console.error('Failed to copy to clipboard:', err);
      alert('Failed to copy to clipboard. Please try again.');
    });
  };

  const handleNewSearch = () => {
    sessionStorage.removeItem('jobAnalysisResults');
    router.push('/');
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-slate-900 text-slate-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mx-auto mb-4"></div>
          <p className="text-slate-300">Loading results...</p>
        </div>
      </div>
    );
  }

  if (error || !results) {
    return (
      <div className="min-h-screen bg-slate-900 text-slate-100 flex items-center justify-center">
        <div className="text-center max-w-md">
          <div className="text-red-400 text-6xl mb-4">‚ö†Ô∏è</div>
          <h1 className="text-2xl font-bold mb-4">No Results Found</h1>
          <p className="text-slate-300 mb-6">{error}</p>
          <Button onClick={handleNewSearch} className="bg-blue-600 hover:bg-blue-700">
            Search Again
          </Button>
        </div>
      </div>
    );
  }

  const CategoryCard = ({
    title,
    terms,
    icon,
    colorClass
  }: {
    title: string;
    terms: AnalyzedTerm[];
    icon: string;
    colorClass: string;
  }) => (
    <Card className="bg-slate-800 border-slate-700">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-slate-100">
          <span className="text-2xl">{icon}</span>
          {title}
        </CardTitle>
        <CardDescription className="text-slate-400">
          Top {terms.length} most mentioned {title.toLowerCase()}
        </CardDescription>
      </CardHeader>
      <CardContent className="p-0">
        <div className="border border-slate-600 rounded-lg overflow-hidden">
          <Table>
            <TableHeader>
              <TableRow className="border-b border-slate-600 bg-slate-700/50 hover:bg-slate-700/70">
                <TableHead className="text-slate-200 font-semibold border-r border-slate-600 px-4 py-3">
                  Term
                </TableHead>
                <TableHead className="text-slate-200 font-semibold text-center w-24 px-4 py-3">
                  Count
                </TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {terms.map((term, index) => (
                <TableRow key={index} className="border-b-2 border-slate-500 hover:bg-slate-700/30">
                  <TableCell className="border-r border-slate-600 px-4 py-4">
                    <div className="space-y-1">
                      <div className="font-medium text-slate-100 capitalize">{term.term}</div>
                      {term.context_sentences.length > 0 && (
                        <div className="text-sm text-slate-400 line-clamp-2">
                          "{term.context_sentences[0]}"
                        </div>
                      )}
                    </div>
                  </TableCell>
                  <TableCell className="text-center px-4 py-4">
                    <Badge className={`${colorClass} text-white font-semibold`}>
                      {term.count}
                    </Badge>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );

  return (
    <div className="min-h-screen bg-slate-900 text-slate-100">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <Button 
              onClick={handleNewSearch}
              variant="outline"
              className="border-slate-600 text-slate-300 hover:bg-slate-800"
            >
              ‚Üê New Search
            </Button>
            <Button 
              onClick={handleCopyToClipboard}
              className="bg-green-600 hover:bg-green-700"
            >
              üìã Copy Results
            </Button>
          </div>
          
          <div className="text-center">
            <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              {results.job_title}
            </h1>
            <div className="flex items-center justify-center gap-4 text-slate-300">
              <span>üìç {results.location}</span>
              <span>‚Ä¢</span>
              <span>üìä {results.total_postings_analyzed} job postings analyzed</span>
              <span>‚Ä¢</span>
              <span>üè∑Ô∏è SOC: {results.soc_code}</span>
            </div>
          </div>
        </div>

        {/* Results Grid */}
        <div className="grid lg:grid-cols-2 gap-6">
          <CategoryCard
            title="Responsibilities"
            terms={results.responsibilities}
            icon="üìã"
            colorClass="bg-blue-600"
          />
          <CategoryCard
            title="Skills"
            terms={results.skills}
            icon="üõ†Ô∏è"
            colorClass="bg-green-600"
          />
          <CategoryCard
            title="Qualifications"
            terms={results.qualifications}
            icon="üéì"
            colorClass="bg-purple-600"
          />
          <CategoryCard
            title="Unique Aspects"
            terms={results.unique_aspects}
            icon="‚ú®"
            colorClass="bg-orange-600"
          />
        </div>

        {/* Footer */}
        <div className="mt-12 text-center">
          <Card className="bg-slate-800 border-slate-700 max-w-2xl mx-auto">
            <CardContent className="pt-6">
              <p className="text-slate-300 mb-4">
                This analysis is based on real job postings from the current market. 
                Use these insights to tailor your resume, prepare for interviews, and understand what employers value most.
              </p>
              <Button 
                onClick={handleNewSearch}
                className="bg-blue-600 hover:bg-blue-700"
              >
                Analyze Another Job
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}